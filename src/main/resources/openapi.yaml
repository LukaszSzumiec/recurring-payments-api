openapi: 3.0.3
info:
  title: Recurring Payments API
  version: 1.1.0
  description: API for subscriptions and recurring payments (API-first).
servers:
  - url: /

tags:
  - name: Auth
  - name: Payments
  - name: Subscriptions

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login (JWT)
      operationId: login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginForm'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginForm'
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: HttpOnly refresh token cookie (name=refresh_token)
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TokenResponse' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /api/auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refresh_token
          required: false
          schema: { type: string }
        - in: header
          name: Authorization
          required: false
          schema: { type: string, example: "Bearer eyJ..." }
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: Rotated HttpOnly refresh token cookie
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TokenResponse' }
        '401':
          description: Invalid/expired refresh token

  /api/auth/logout:
    post:
      tags: [Auth]
      summary: Logout and revoke refresh token
      operationId: logout
      parameters:
        - in: cookie
          name: refresh_token
          required: false
          schema: { type: string }
        - in: header
          name: Authorization
          required: false
          schema: { type: string, example: "Bearer eyJ..." }
      responses:
        '204':
          description: No Content
          headers:
            Set-Cookie:
              description: Clears refresh_token cookie
              schema: { type: string }

  /api/auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      operationId: getCurrentUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UsernameResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /api/users/{userId}/payments:
    get:
      tags: [Payments]
      summary: List payments for a user (paginated)
      operationId: listPaymentsForUser
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: integer, format: int64 }
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
        - name: size
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaymentPage' }
        '401':
          description: Unauthorized

  /api/subscriptions:
    get:
      tags: [Subscriptions]
      summary: List subscriptions for current user (ADMIN sees all)
      operationId: listSubscriptions
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Subscription' }
        '401':
          description: Unauthorized

    post:
      tags: [Subscriptions]
      summary: Create a subscription
      operationId: createSubscription
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string, maxLength: 128 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateSubscriptionRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subscription' }
        '400':
          description: Validation failed
        '401':
          description: Unauthorized
        '409':
          description: Conflicting idempotency key payload

  /api/subscriptions/{subscriptionId}:
    get:
      tags: [Subscriptions]
      summary: Get subscription details
      operationId: getSubscription
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Subscription' }
        '401':
          description: Unauthorized
        '404':
          description: Not found

  /api/subscriptions/{subscriptionId}/process:
    post:
      tags: [Subscriptions]
      summary: Process payments for a subscription immediately
      operationId: processSubscriptionNow
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema: { type: integer, format: int64 }
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string, maxLength: 128 }
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '404':
          description: Subscription not found
        '409':
          description: Conflicting idempotency key payload

  /api/payments/by-user/{userId}:
    get:
      deprecated: true
      tags: [Payments]
      summary: "[Deprecated] Use /api/users/{userId}/payments"
      operationId: listPaymentsByUser_DEPRECATED
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Payment' }
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginForm:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
        role: { type: string, example: USER, default: USER }

    TokenResponse:
      type: object
      required: [accessToken]
      properties:
        accessToken: { type: string }

    UsernameResponse:
      type: object
      required: [username]
      properties:
        username: { type: string }

    ErrorResponse:
      type: object
      properties:
        error: { type: string }

    CreateSubscriptionRequest:
      type: object
      required: [userId, price, billingDayOfMonth]
      properties:
        userId: { type: integer, format: int64 }
        price: { type: string, example: "19.99" }
        billingDayOfMonth:
          type: integer
          minimum: 1
          maximum: 28

    Subscription:
      type: object
      required: [id, userId, price, billingDayOfMonth, nextChargeDate]
      properties:
        id: { type: integer, format: int64 }
        userId: { type: integer, format: int64 }
        price: { type: string }
        billingDayOfMonth: { type: integer, minimum: 1, maximum: 28 }
        nextChargeDate: { type: string, format: date }

    PaymentStatus:
      type: string
      enum: [PENDING, SUCCESS, FAILED]

    Payment:
      type: object
      required: [id, subscriptionId, amount, status, createdAt]
      properties:
        id: { type: integer, format: int64 }
        subscriptionId: { type: integer, format: int64 }
        amount: { type: string, example: "19.99" }
        status: { $ref: '#/components/schemas/PaymentStatus' }
        createdAt: { type: string, format: date-time }

    PaymentPage:
      type: object
      required: [items, page, size, totalElements, totalPages]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Payment' }
        page: { type: integer, minimum: 0 }
        size: { type: integer, minimum: 1 }
        totalElements: { type: integer, format: int64, minimum: 0 }
        totalPages: { type: integer, minimum: 0 }
